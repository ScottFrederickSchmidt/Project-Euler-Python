# Project Euler 38: https://projecteuler.net/problem=38
# Take the number 192 and multiply it by each of 1, 2, and 3:
# 192 × 1 = 192
# 192 × 2 = 384
# 192 × 3 = 576

#By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)
#The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).
#What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, ... , n) where n > 1?

#Solution1 gets correct answer in 20 lines of code; instead of 40 lines of code in solution 2:
import time
start=time.time()

def check(pand): #A 1-9 pangital sorted should end up as 123456789
    t=[]
    for x in str(p):
        t.append( int(x) )
        t.sort()
        s = ''.join(map(str, t)) 
        if int(s)==123456789: 
            #print(s, "found", str_p)
            return True

solution=[]
for n in range(10000, 1, -1): #Finds all possible combos with 4 digits x nums 1 through 5
    pand='' #restart pand to 0 after checking possible pandigital
    for m in range(10, 1, -1):  
        p=str(n*m)
        pand=pand+p
        if len(pand)==9 and check(pand): # will send pand through function only if 9 numbers
            solution.append(pand)
            
print( max(pans), "Done!", time.time()-start, "seconds") # 932718654 Done! 0.062 seconds
# Sources Used:
# https://stackoverflow.com/questions/489999/convert-list-of-ints-to-one-number
