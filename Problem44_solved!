# Project Euler 44: https://projecteuler.net/problem=44
# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
#Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal AND
# D = |Pk − Pj| is minimised; what is the value of D?

#This solution solves problem in less than 2 seconds which is much better than the original of 86 seconds.
#For one, I only checked the current biggest number each time. In the old solution, I made a very, very big number of pentagon numbers. 
#Therefore, we do not do extra work of guessing and having the computer do extra calculations.
#Also, I set up a ispentagon function which is faster than searching through an entire array of pents numbers.

import math, time
start=time.time()

#checks if number is a pentagon number:
def ispentagon(n):
    if math.sqrt(1 + 24 * n) % 6 == 5:
        return True

run=True # break statement did not work for this problem
solution=0
pents=[] #will be apending new pentagon numbers..
n=1
while run is True: #will shut off once solution is found
    k=int(n*(3*n-1)/2) #given in the direction to find next pentagon number
    pents.append(k)
    for j in pents: #get each num in pents array
        d=k-j  #if current k minus a j is a pentagon, then d+j=k
        if j!=d and ispentagon(d): #check is k-j is pentagon number
            #print(k, j, d) 
            diff=abs(d-j)
            if ispentagon(diff): #see if difference is also True
                solution=diff #store answer
                run=False #shuts off while loop
    n=n+1 #get next pentagon number by adding one
print( solution, time.time()-start,"seconds") # 5482660 1.671 seconds
#This solution finds the solution in 1.4 seconds instead of 86 seconds! Very proud of the new solution.
