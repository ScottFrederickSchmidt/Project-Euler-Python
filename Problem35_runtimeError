# Project Euler 35: https://projecteuler.net/problem=35
# The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.
# There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, 97.
# How many circular primes are there below one million?

#Solution is correct but takes 96 seconds! Will soon create a second, faster solution:
import time
start=time.time()
print("running..")

#Gets primes below a million and stores as a string
primes=['2']
n=3
while n<1_000_000:
    for j in range(3, int(n**.5)+1):
        if (n%j==0):
            break;
    else:
        n_str=str(n)
        primes.append(n_str)
    n=n+2
print("got primes")

count=0
circles=[]

for p in primes:
    t=str(p)
    temp=t[-1:]+t[:-1] #rotates first num to last num
    test=[]
    temp_count=0
    while temp in primes: #if rotation in primes
        temp=temp[-1:]+temp[:-1] # sends last int to front
        test.append(temp)
        temp_count=temp_count+1
        if temp==p: #means temp fully rotated. 
            circles=circles+test 
            print(count, test)
            count=count+temp_count
            break

print("Solution:", len(set(circles) ), time.time()-start, "seconds") #Solution: 55. 98.25746 seconds
# To speed up as this took 98 seconds to solve:
# Needs to delete any prime with a 0, 2, 4, 5, 8 before checking for rotation. 
# This version gets prime numbers more than once which is why it is slow?
# To speed up, should delete out of prime list once a circle number is found? 
# Will do further research and edit in a faster solution at a later time. 
    
