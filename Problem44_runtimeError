# Project Euler 44: https://projecteuler.net/problem=44
# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
#It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
#Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal AND
# D = |Pk − Pj| is minimised; what is the value of D?

# Original, gets correct solution in 86 seconds, too slow!
import time
print("running..")
start=time.time()

pent=[]
d=set()

#gets pentagon numbers
for n in range(1, 3000):  # n=10,000 still runs after 15min
    p= n*(3*n -1)/2 
    p=int(p)
    pent.append(p)

for i in pent: #grab one pent number
    for j in pent: #grab another pent number
        if i !=j and i<j: # i<j makes sure that pairs are not included twice
            p=i+j
            if p in pent:
                d=j-i
                if d in pent:
                    print("found d!", d, "Done", time.time()-start, "seconds.") #found d! 5482660 Done 88.54 seconds.
                    break # MAJOR ISSUE: does not stop for loop
                    
print("Done", time.time()-start, "seconds.")
